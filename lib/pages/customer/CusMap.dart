import 'dart:async';
import 'dart:convert';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:geolocator/geolocator.dart';
import 'package:latlong2/latlong.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:mobile_miniproject_app/config/config.dart';
import 'package:http/http.dart' as http;
import 'package:mobile_miniproject_app/pages/rider/RiderConfirm.dart';

class CusMapPage extends StatefulWidget {
  final int ord_id;
  const CusMapPage({super.key, required this.ord_id});

  @override
  State<CusMapPage> createState() => _CusMapPageState();
}

class _CusMapPageState extends State<CusMapPage> {
  StreamSubscription<Position>? _positionStream;
  StreamSubscription<DocumentSnapshot>? _firebaseStream;
  LatLng? riderPosition;
  LatLng? cusPosition;
  bool isLoading = true;
  final MapController mapController = MapController();
  List<LatLng> routePoints = [];
  bool isNearCustomer = false;

  @override
  void initState() {
    super.initState();
    _initMap();
  }

  @override
  void dispose() {
    _positionStream?.cancel();
    _firebaseStream?.cancel();
    super.dispose();
  }

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á Rider_coordinate ‡∏à‡∏≤‡∏Å Firebase
  void _listenToFirebaseChanges() {
    print("üî• Starting Firebase listener...");
    _firebaseStream = FirebaseFirestore.instance
        .collection('BP_Order_detail')
        .doc('order${widget.ord_id}')
        .snapshots()
        .listen((snapshot) {
      print("üî• Firebase snapshot received");
      if (snapshot.exists) {
        var data = snapshot.data()!;
        String riderCoord = data['Rider_coordinate'] ?? '';
        print("üî• Rider_coordinate from Firebase: $riderCoord");

        if (riderCoord.isNotEmpty) {
          LatLng? newPos = _parseCoordinates(riderCoord);

          if (newPos != null) {
            print(
                "üî• New position parsed: ${newPos.latitude}, ${newPos.longitude}");
            print(
                "üî• Current position: ${riderPosition?.latitude}, ${riderPosition?.longitude}");

            // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏Å‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
            bool nearCustomer = false;
            if (cusPosition != null) {
              double distanceInMeters = Geolocator.distanceBetween(
                newPos.latitude,
                newPos.longitude,
                cusPosition!.latitude,
                cusPosition!.longitude,
              );
              nearCustomer = distanceInMeters <= 50;
              print("üî• Distance to customer: ${distanceInMeters}m");
            }

            setState(() {
              riderPosition = newPos;
              isNearCustomer = nearCustomer;
            });
            print("üî• UI Updated!");

            // ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà
            mapController.move(newPos, mapController.camera.zoom);

            // ‡∏£‡∏µ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
            if (cusPosition != null) {
              _getRouteFromORS(newPos, cusPosition!).then((newRoute) {
                if (mounted) {
                  setState(() {
                    routePoints = newRoute;
                  });
                  print("üî• Route updated!");
                }
              });
            }
          }
        }
      }
    });
  }

  // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏î‡πâ‡∏ß‡∏¢ GPS
  Future<void> startRiderMovement() async {
    print("üìç Starting GPS tracking...");

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
    if (!serviceEnabled) {
      Fluttertoast.showToast(msg: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î GPS ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô");
      return;
    }

    LocationPermission permission = await Geolocator.checkPermission();
    if (permission == LocationPermission.denied) {
      permission = await Geolocator.requestPermission();
      if (permission == LocationPermission.denied) {
        Fluttertoast.showToast(msg: "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á");
        return;
      }
    }

    if (permission == LocationPermission.deniedForever) {
      Fluttertoast.showToast(msg: "‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏ñ‡∏≤‡∏ß‡∏£");
      return;
    }

    // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á GPS
    _positionStream = Geolocator.getPositionStream(
      locationSettings: const LocationSettings(
        accuracy: LocationAccuracy.high,
        distanceFilter: 5, // ‡∏•‡∏î‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 5 ‡πÄ‡∏°‡∏ï‡∏£ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡πà‡∏≠‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
      ),
    ).listen((Position position) async {
      print("üìç GPS Update: ${position.latitude}, ${position.longitude}");

      LatLng newPosition = LatLng(position.latitude, position.longitude);

      // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏Å‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
      bool nearCustomer = false;
      if (cusPosition != null) {
        double distanceInMeters = Geolocator.distanceBetween(
          newPosition.latitude,
          newPosition.longitude,
          cusPosition!.latitude,
          cusPosition!.longitude,
        );
        nearCustomer = distanceInMeters <= 50;
        print("üìç Distance to customer: ${distanceInMeters}m");
      }

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
      setState(() {
        riderPosition = newPosition;
        isNearCustomer = nearCustomer;
      });

      // ‚úÖ ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå
      mapController.move(riderPosition!, mapController.camera.zoom);

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Firebase
      try {
        await FirebaseFirestore.instance
            .collection('BP_Order_detail')
            .doc('order${widget.ord_id}')
            .update({
          'Rider_coordinate': '${position.latitude},${position.longitude}',
        });
        print("‚úÖ Firebase updated successfully");
      } catch (e) {
        print("‚ùå Error updating Firebase: $e");
      }

      // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      if (cusPosition != null) {
        try {
          final newRoute = await _getRouteFromORS(riderPosition!, cusPosition!);
          if (mounted) {
            setState(() {
              routePoints = newRoute;
            });
          }
        } catch (e) {
          print('‚ùå Routing update failed: $e');
        }
      }
    });
  }

  // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
  Future<void> _initMap() async {
    try {
      print("üöÄ Initializing map...");

      var snapshot = await FirebaseFirestore.instance
          .collection('BP_Order_detail')
          .doc('order${widget.ord_id}')
          .get();

      if (snapshot.exists) {
        var data = snapshot.data()!;

        // ‡∏î‡∏∂‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
        String cusCoordinate = data['Cus_coordinate'] ?? '';
        cusPosition = _parseCoordinates(cusCoordinate);
        print("üè† Customer position: $cusPosition");

        // ‡∏î‡∏∂‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        String riderCoordinate = data['Rider_coordinate'] ?? '';
        if (riderCoordinate.isNotEmpty) {
          riderPosition = _parseCoordinates(riderCoordinate);
          print("üèçÔ∏è Initial rider position: $riderPosition");
        }
      }

      // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      if (riderPosition == null) {
        Position position = await Geolocator.getCurrentPosition(
          desiredAccuracy: LocationAccuracy.high,
        );
        riderPosition = LatLng(position.latitude, position.longitude);
        print("üìç Current GPS position: $riderPosition");

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏•‡∏á Firebase
        await FirebaseFirestore.instance
            .collection('BP_Order_detail')
            .doc('order${widget.ord_id}')
            .update({
          'Rider_coordinate': '${position.latitude},${position.longitude}',
        });
      }

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
      if (riderPosition != null && cusPosition != null) {
        routePoints = await _getRouteFromORS(riderPosition!, cusPosition!);
        mapController.move(riderPosition!, 13);

        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        double distanceInMeters = Geolocator.distanceBetween(
          riderPosition!.latitude,
          riderPosition!.longitude,
          cusPosition!.latitude,
          cusPosition!.longitude,
        );
        isNearCustomer = distanceInMeters <= 50;
        print("üìè Initial distance: ${distanceInMeters}m");
      }

      setState(() => isLoading = false);

      // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á GPS tracking ‡πÅ‡∏•‡∏∞ Firebase listener
      await startRiderMovement();
      _listenToFirebaseChanges();

      print("‚úÖ Map initialized successfully!");
    } catch (e) {
      print("‚ùå Error initializing map: $e");
      Fluttertoast.showToast(msg: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e");
      setState(() => isLoading = false);
    }
  }

  // ‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏≤‡∏Å String ‡πÄ‡∏õ‡πá‡∏ô LatLng
  LatLng? _parseCoordinates(String coordinates) {
    try {
      var parts = coordinates.split(',');
      if (parts.length >= 2) {
        return LatLng(
          double.parse(parts[0].trim()),
          double.parse(parts[1].trim()),
        );
      }
    } catch (e) {
      print('‚ùå ‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e');
    }
    return null;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"),
        automaticallyImplyLeading: false,
      ),
      body: isLoading
          ? const Center(child: CircularProgressIndicator())
          : (riderPosition == null || cusPosition == null)
              ? const Center(child: Text("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¥‡∏Å‡∏±‡∏î"))
              : Stack(
                  children: [
                    FlutterMap(
                      mapController: mapController,
                      options: MapOptions(
                        initialCenter: riderPosition!,
                        initialZoom: 13,
                      ),
                      children: [
                        TileLayer(
                          urlTemplate:
                              'https://tile.openstreetmap.org/{z}/{x}/{y}.png',
                        ),
                        MarkerLayer(
                          markers: [
                            Marker(
                              point: riderPosition!,
                              width: 60,
                              height: 60,
                              child: const Icon(
                                Icons.motorcycle,
                                color: Colors.blue,
                                size: 40,
                              ),
                            ),
                            Marker(
                              point: cusPosition!,
                              width: 60,
                              height: 60,
                              child: const Icon(
                                Icons.home,
                                color: Colors.red,
                                size: 40,
                              ),
                            ),
                          ],
                        ),
                        PolylineLayer(
                          polylines: [
                            Polyline(
                              points: routePoints.isNotEmpty
                                  ? routePoints
                                  : [riderPosition!, cusPosition!],
                              color: Colors.green,
                              strokeWidth: 4.0,
                            ),
                          ],
                        ),
                      ],
                    ),
                    // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏Å‡∏•‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
                    if (isNearCustomer)
                      Positioned(
                        bottom: 20,
                        left: 20,
                        right: 20,
                        child: ElevatedButton(
                          onPressed: () {
                            _positionStream?.cancel();
                            _firebaseStream?.cancel();
                            Navigator.pushReplacement(
                              context,
                              MaterialPageRoute(
                                builder: (_) =>
                                    RiderConfirmPage(ord_id: widget.ord_id),
                              ),
                            );
                          },
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.deepPurple,
                            foregroundColor: Colors.white,
                            padding: const EdgeInsets.symmetric(
                                vertical: 16, horizontal: 24),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                            elevation: 4,
                          ),
                          child: const Text(
                            "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤",
                            style: TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                      ),

                    // ‚úÖ Debug info (‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à)
                    Positioned(
                      top: 10,
                      left: 10,
                      child: Container(
                        padding: const EdgeInsets.all(8),
                        decoration: BoxDecoration(
                          color: Colors.white.withOpacity(0.9),
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              "Rider: ${riderPosition?.latitude.toStringAsFixed(6)}, ${riderPosition?.longitude.toStringAsFixed(6)}",
                              style: const TextStyle(fontSize: 10),
                            ),
                            Text(
                              "Near: $isNearCustomer",
                              style: const TextStyle(fontSize: 10),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ],
                ),
    );
  }

  // ‡∏î‡∏∂‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å OpenRouteService API
  Future<List<LatLng>> _getRouteFromORS(LatLng start, LatLng end) async {
    const orsApiKey =
        'eyJvcmciOiI1YjNjZTM1OTc4NTExMTAwMDFjZjYyNDgiLCJpZCI6IjA5YzBkODc1YmM4MzQwNDZhNGRkZDcwODNjZDAxMTFkIiwiaCI6Im11cm11cjY0In0=';
    final url =
        'https://api.openrouteservice.org/v2/directions/driving-car?api_key=$orsApiKey&start=${start.longitude},${start.latitude}&end=${end.longitude},${end.latitude}';

    try {
      final response = await http.get(Uri.parse(url));

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final coords = data['features'][0]['geometry']['coordinates'] as List;
        return coords
            .map((c) => LatLng(c[1].toDouble(), c[0].toDouble()))
            .toList();
      } else {
        print('‚ùå Routing API Error: ${response.statusCode}');
        return [start, end];
      }
    } catch (e) {
      print('‚ùå Error fetching route: $e');
      return [start, end];
    }
  }
}
